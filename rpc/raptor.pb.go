// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: rpc/raptor.proto

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AcquireServerStressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AcquireServerStressRequest) Reset() {
	*x = AcquireServerStressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireServerStressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireServerStressRequest) ProtoMessage() {}

func (x *AcquireServerStressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireServerStressRequest.ProtoReflect.Descriptor instead.
func (*AcquireServerStressRequest) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{0}
}

type AcquireServerStressReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiReady     bool  `protobuf:"varint,2,opt,name=ApiReady,proto3" json:"ApiReady,omitempty"`
	RequestAfter int64 `protobuf:"varint,3,opt,name=RequestAfter,proto3" json:"RequestAfter,omitempty"`
}

func (x *AcquireServerStressReply) Reset() {
	*x = AcquireServerStressReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireServerStressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireServerStressReply) ProtoMessage() {}

func (x *AcquireServerStressReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireServerStressReply.ProtoReflect.Descriptor instead.
func (*AcquireServerStressReply) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{1}
}

func (x *AcquireServerStressReply) GetApiReady() bool {
	if x != nil {
		return x.ApiReady
	}
	return false
}

func (x *AcquireServerStressReply) GetRequestAfter() int64 {
	if x != nil {
		return x.RequestAfter
	}
	return 0
}

type TransferIPResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VPCIP           *VPCIP `protobuf:"bytes,1,opt,name=VPCIP,proto3" json:"VPCIP,omitempty"`
	FromNetworkCard string `protobuf:"bytes,2,opt,name=FromNetworkCard,proto3" json:"FromNetworkCard,omitempty"`
	ToNetworkCard   string `protobuf:"bytes,3,opt,name=ToNetworkCard,proto3" json:"ToNetworkCard,omitempty"`
	MacAddress      string `protobuf:"bytes,4,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *TransferIPResourceRequest) Reset() {
	*x = TransferIPResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferIPResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferIPResourceRequest) ProtoMessage() {}

func (x *TransferIPResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferIPResourceRequest.ProtoReflect.Descriptor instead.
func (*TransferIPResourceRequest) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{2}
}

func (x *TransferIPResourceRequest) GetVPCIP() *VPCIP {
	if x != nil {
		return x.VPCIP
	}
	return nil
}

func (x *TransferIPResourceRequest) GetFromNetworkCard() string {
	if x != nil {
		return x.FromNetworkCard
	}
	return ""
}

func (x *TransferIPResourceRequest) GetToNetworkCard() string {
	if x != nil {
		return x.ToNetworkCard
	}
	return ""
}

func (x *TransferIPResourceRequest) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type TransferIPResourceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferIPResourceReply) Reset() {
	*x = TransferIPResourceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferIPResourceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferIPResourceReply) ProtoMessage() {}

func (x *TransferIPResourceReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferIPResourceReply.ProtoReflect.Descriptor instead.
func (*TransferIPResourceReply) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{3}
}

type AcquireInstanceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIP string `protobuf:"bytes,1,opt,name=NodeIP,proto3" json:"NodeIP,omitempty"`
}

func (x *AcquireInstanceInfoRequest) Reset() {
	*x = AcquireInstanceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireInstanceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireInstanceInfoRequest) ProtoMessage() {}

func (x *AcquireInstanceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireInstanceInfoRequest.ProtoReflect.Descriptor instead.
func (*AcquireInstanceInfoRequest) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{4}
}

func (x *AcquireInstanceInfoRequest) GetNodeIP() string {
	if x != nil {
		return x.NodeIP
	}
	return ""
}

type AcquireInstanceInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *Instance `protobuf:"bytes,2,opt,name=Instance,proto3" json:"Instance,omitempty"`
}

func (x *AcquireInstanceInfoReply) Reset() {
	*x = AcquireInstanceInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireInstanceInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireInstanceInfoReply) ProtoMessage() {}

func (x *AcquireInstanceInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireInstanceInfoReply.ProtoReflect.Descriptor instead.
func (*AcquireInstanceInfoReply) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{5}
}

func (x *AcquireInstanceInfoReply) GetInstance() *Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type AllocateIPResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pool                  string `protobuf:"bytes,2,opt,name=Pool,proto3" json:"Pool,omitempty"`
	TrunkId               string `protobuf:"bytes,3,opt,name=TrunkId,proto3" json:"TrunkId,omitempty"`
	NetworkCardPortId     string `protobuf:"bytes,4,opt,name=NetworkCardPortId,proto3" json:"NetworkCardPortId,omitempty"`
	NetworkId             string `protobuf:"bytes,5,opt,name=NetworkId,proto3" json:"NetworkId,omitempty"`
	SubnetId              string `protobuf:"bytes,6,opt,name=SubnetId,proto3" json:"SubnetId,omitempty"`
	NetworkCardMacAddress string `protobuf:"bytes,7,opt,name=NetworkCardMacAddress,proto3" json:"NetworkCardMacAddress,omitempty"`
	ResourceId            string `protobuf:"bytes,8,opt,name=ResourceId,proto3" json:"ResourceId,omitempty"`
}

func (x *AllocateIPResourceRequest) Reset() {
	*x = AllocateIPResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateIPResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateIPResourceRequest) ProtoMessage() {}

func (x *AllocateIPResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateIPResourceRequest.ProtoReflect.Descriptor instead.
func (*AllocateIPResourceRequest) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{6}
}

func (x *AllocateIPResourceRequest) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *AllocateIPResourceRequest) GetTrunkId() string {
	if x != nil {
		return x.TrunkId
	}
	return ""
}

func (x *AllocateIPResourceRequest) GetNetworkCardPortId() string {
	if x != nil {
		return x.NetworkCardPortId
	}
	return ""
}

func (x *AllocateIPResourceRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *AllocateIPResourceRequest) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *AllocateIPResourceRequest) GetNetworkCardMacAddress() string {
	if x != nil {
		return x.NetworkCardMacAddress
	}
	return ""
}

func (x *AllocateIPResourceRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

type AllocateIPResourceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VPCIP *VPCIP `protobuf:"bytes,1,opt,name=VPCIP,proto3" json:"VPCIP,omitempty"`
}

func (x *AllocateIPResourceReply) Reset() {
	*x = AllocateIPResourceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateIPResourceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateIPResourceReply) ProtoMessage() {}

func (x *AllocateIPResourceReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateIPResourceReply.ProtoReflect.Descriptor instead.
func (*AllocateIPResourceReply) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{7}
}

func (x *AllocateIPResourceReply) GetVPCIP() *VPCIP {
	if x != nil {
		return x.VPCIP
	}
	return nil
}

type ReleaseIPResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId        string `protobuf:"bytes,1,opt,name=ResourceId,proto3" json:"ResourceId,omitempty"`
	NetworkCardPortId string `protobuf:"bytes,2,opt,name=NetworkCardPortId,proto3" json:"NetworkCardPortId,omitempty"`
	TrunkId           string `protobuf:"bytes,3,opt,name=TrunkId,proto3" json:"TrunkId,omitempty"`
	Vid               uint32 `protobuf:"varint,4,opt,name=Vid,proto3" json:"Vid,omitempty"`
	MacAddress        string `protobuf:"bytes,5,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	IPSet             *IPSet `protobuf:"bytes,6,opt,name=IPSet,proto3" json:"IPSet,omitempty"`
	DeleteResource    bool   `protobuf:"varint,7,opt,name=DeleteResource,proto3" json:"DeleteResource,omitempty"`
}

func (x *ReleaseIPResourceRequest) Reset() {
	*x = ReleaseIPResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseIPResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseIPResourceRequest) ProtoMessage() {}

func (x *ReleaseIPResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseIPResourceRequest.ProtoReflect.Descriptor instead.
func (*ReleaseIPResourceRequest) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{8}
}

func (x *ReleaseIPResourceRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ReleaseIPResourceRequest) GetNetworkCardPortId() string {
	if x != nil {
		return x.NetworkCardPortId
	}
	return ""
}

func (x *ReleaseIPResourceRequest) GetTrunkId() string {
	if x != nil {
		return x.TrunkId
	}
	return ""
}

func (x *ReleaseIPResourceRequest) GetVid() uint32 {
	if x != nil {
		return x.Vid
	}
	return 0
}

func (x *ReleaseIPResourceRequest) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *ReleaseIPResourceRequest) GetIPSet() *IPSet {
	if x != nil {
		return x.IPSet
	}
	return nil
}

func (x *ReleaseIPResourceRequest) GetDeleteResource() bool {
	if x != nil {
		return x.DeleteResource
	}
	return false
}

type ReleasePodIPReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReleasePodIPReply) Reset() {
	*x = ReleasePodIPReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleasePodIPReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasePodIPReply) ProtoMessage() {}

func (x *ReleasePodIPReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasePodIPReply.ProtoReflect.Descriptor instead.
func (*ReleasePodIPReply) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{9}
}

type AllocateNetworkCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,1,opt,name=InstanceId,proto3" json:"InstanceId,omitempty"`
	SubnetId   string `protobuf:"bytes,3,opt,name=SubnetId,proto3" json:"SubnetId,omitempty"`
	Trunk      bool   `protobuf:"varint,4,opt,name=Trunk,proto3" json:"Trunk,omitempty"`
}

func (x *AllocateNetworkCardRequest) Reset() {
	*x = AllocateNetworkCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateNetworkCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateNetworkCardRequest) ProtoMessage() {}

func (x *AllocateNetworkCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateNetworkCardRequest.ProtoReflect.Descriptor instead.
func (*AllocateNetworkCardRequest) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{10}
}

func (x *AllocateNetworkCardRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *AllocateNetworkCardRequest) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *AllocateNetworkCardRequest) GetTrunk() bool {
	if x != nil {
		return x.Trunk
	}
	return false
}

type AllocateNetworkCardReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkCard *NetworkCard `protobuf:"bytes,2,opt,name=NetworkCard,proto3" json:"NetworkCard,omitempty"`
}

func (x *AllocateNetworkCardReply) Reset() {
	*x = AllocateNetworkCardReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateNetworkCardReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateNetworkCardReply) ProtoMessage() {}

func (x *AllocateNetworkCardReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateNetworkCardReply.ProtoReflect.Descriptor instead.
func (*AllocateNetworkCardReply) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{11}
}

func (x *AllocateNetworkCardReply) GetNetworkCard() *NetworkCard {
	if x != nil {
		return x.NetworkCard
	}
	return nil
}

type ReleaseNetworkCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkCardPortId string `protobuf:"bytes,1,opt,name=NetworkCardPortId,proto3" json:"NetworkCardPortId,omitempty"`
}

func (x *ReleaseNetworkCardRequest) Reset() {
	*x = ReleaseNetworkCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseNetworkCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseNetworkCardRequest) ProtoMessage() {}

func (x *ReleaseNetworkCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseNetworkCardRequest.ProtoReflect.Descriptor instead.
func (*ReleaseNetworkCardRequest) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{12}
}

func (x *ReleaseNetworkCardRequest) GetNetworkCardPortId() string {
	if x != nil {
		return x.NetworkCardPortId
	}
	return ""
}

type ReleaseNetworkCardReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReleaseNetworkCardReply) Reset() {
	*x = ReleaseNetworkCardReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseNetworkCardReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseNetworkCardReply) ProtoMessage() {}

func (x *ReleaseNetworkCardReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseNetworkCardReply.ProtoReflect.Descriptor instead.
func (*ReleaseNetworkCardReply) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{13}
}

type NetworkCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string            `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	IPSet          *IPSet            `protobuf:"bytes,2,opt,name=IPSet,proto3" json:"IPSet,omitempty"`
	MAC            string            `protobuf:"bytes,3,opt,name=MAC,proto3" json:"MAC,omitempty"`
	SecurityGroups []string          `protobuf:"bytes,4,rep,name=SecurityGroups,proto3" json:"SecurityGroups,omitempty"`
	VPC            *VPC              `protobuf:"bytes,5,opt,name=VPC,proto3" json:"VPC,omitempty"`
	SubnetId       string            `protobuf:"bytes,6,opt,name=SubnetId,proto3" json:"SubnetId,omitempty"`
	NetworkId      string            `protobuf:"bytes,7,opt,name=NetworkId,proto3" json:"NetworkId,omitempty"`
	VPCIPs         map[string]*VPCIP `protobuf:"bytes,8,rep,name=VPCIPs,proto3" json:"VPCIPs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tags           []string          `protobuf:"bytes,9,rep,name=Tags,proto3" json:"Tags,omitempty"`
	Pool           string            `protobuf:"bytes,10,opt,name=Pool,proto3" json:"Pool,omitempty"`
	IPLimit        int32             `protobuf:"varint,11,opt,name=IPLimit,proto3" json:"IPLimit,omitempty"`
	RuleTable      int32             `protobuf:"varint,12,opt,name=RuleTable,proto3" json:"RuleTable,omitempty"`
	IsTrunk        bool              `protobuf:"varint,13,opt,name=IsTrunk,proto3" json:"IsTrunk,omitempty"`
	TrunkID        string            `protobuf:"bytes,14,opt,name=TrunkID,proto3" json:"TrunkID,omitempty"`
	Index          int32             `protobuf:"varint,15,opt,name=Index,proto3" json:"Index,omitempty"`
	CIDR           *IPSet            `protobuf:"bytes,16,opt,name=CIDR,proto3" json:"CIDR,omitempty"`
}

func (x *NetworkCard) Reset() {
	*x = NetworkCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkCard) ProtoMessage() {}

func (x *NetworkCard) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkCard.ProtoReflect.Descriptor instead.
func (*NetworkCard) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{14}
}

func (x *NetworkCard) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *NetworkCard) GetIPSet() *IPSet {
	if x != nil {
		return x.IPSet
	}
	return nil
}

func (x *NetworkCard) GetMAC() string {
	if x != nil {
		return x.MAC
	}
	return ""
}

func (x *NetworkCard) GetSecurityGroups() []string {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *NetworkCard) GetVPC() *VPC {
	if x != nil {
		return x.VPC
	}
	return nil
}

func (x *NetworkCard) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *NetworkCard) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *NetworkCard) GetVPCIPs() map[string]*VPCIP {
	if x != nil {
		return x.VPCIPs
	}
	return nil
}

func (x *NetworkCard) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NetworkCard) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *NetworkCard) GetIPLimit() int32 {
	if x != nil {
		return x.IPLimit
	}
	return 0
}

func (x *NetworkCard) GetRuleTable() int32 {
	if x != nil {
		return x.RuleTable
	}
	return 0
}

func (x *NetworkCard) GetIsTrunk() bool {
	if x != nil {
		return x.IsTrunk
	}
	return false
}

func (x *NetworkCard) GetTrunkID() string {
	if x != nil {
		return x.TrunkID
	}
	return ""
}

func (x *NetworkCard) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *NetworkCard) GetCIDR() *IPSet {
	if x != nil {
		return x.CIDR
	}
	return nil
}

type Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId   string                  `protobuf:"bytes,1,opt,name=InstanceId,proto3" json:"InstanceId,omitempty"`
	NetworkCards map[string]*NetworkCard `protobuf:"bytes,2,rep,name=NetworkCards,proto3" json:"NetworkCards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Instance) Reset() {
	*x = Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance) ProtoMessage() {}

func (x *Instance) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance.ProtoReflect.Descriptor instead.
func (*Instance) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{15}
}

func (x *Instance) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *Instance) GetNetworkCards() map[string]*NetworkCard {
	if x != nil {
		return x.NetworkCards
	}
	return nil
}

type VPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *VPC) Reset() {
	*x = VPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPC) ProtoMessage() {}

func (x *VPC) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPC.ProtoReflect.Descriptor instead.
func (*VPC) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{16}
}

func (x *VPC) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	NetworkID       string `protobuf:"bytes,2,opt,name=NetworkID,proto3" json:"NetworkID,omitempty"`
	CIDR            *IPSet `protobuf:"bytes,3,opt,name=CIDR,proto3" json:"CIDR,omitempty"`
	GatewayIP       *IPSet `protobuf:"bytes,4,opt,name=GatewayIP,proto3" json:"GatewayIP,omitempty"`
	AllocationCount int64  `protobuf:"varint,5,opt,name=AllocationCount,proto3" json:"AllocationCount,omitempty"`
	AllocatedCount  int64  `protobuf:"varint,6,opt,name=AllocatedCount,proto3" json:"AllocatedCount,omitempty"`
	Name            string `protobuf:"bytes,7,opt,name=Name,proto3" json:"Name,omitempty"`
	IsDefault       bool   `protobuf:"varint,8,opt,name=IsDefault,proto3" json:"IsDefault,omitempty"`
	Pool            string `protobuf:"bytes,9,opt,name=Pool,proto3" json:"Pool,omitempty"`
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{17}
}

func (x *Subnet) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Subnet) GetNetworkID() string {
	if x != nil {
		return x.NetworkID
	}
	return ""
}

func (x *Subnet) GetCIDR() *IPSet {
	if x != nil {
		return x.CIDR
	}
	return nil
}

func (x *Subnet) GetGatewayIP() *IPSet {
	if x != nil {
		return x.GatewayIP
	}
	return nil
}

func (x *Subnet) GetAllocationCount() int64 {
	if x != nil {
		return x.AllocationCount
	}
	return 0
}

func (x *Subnet) GetAllocatedCount() int64 {
	if x != nil {
		return x.AllocatedCount
	}
	return 0
}

func (x *Subnet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Subnet) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *Subnet) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

// IPSet declare a string set contain v4 v6 info
type IPSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IPv4 string `protobuf:"bytes,1,opt,name=IPv4,proto3" json:"IPv4,omitempty"`
	IPv6 string `protobuf:"bytes,2,opt,name=IPv6,proto3" json:"IPv6,omitempty"`
}

func (x *IPSet) Reset() {
	*x = IPSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPSet) ProtoMessage() {}

func (x *IPSet) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPSet.ProtoReflect.Descriptor instead.
func (*IPSet) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{18}
}

func (x *IPSet) GetIPv4() string {
	if x != nil {
		return x.IPv4
	}
	return ""
}

func (x *IPSet) GetIPv6() string {
	if x != nil {
		return x.IPv6
	}
	return ""
}

type IPPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolName  string `protobuf:"bytes,1,opt,name=PoolName,proto3" json:"PoolName,omitempty"`
	NetworkID string `protobuf:"bytes,2,opt,name=NetworkID,proto3" json:"NetworkID,omitempty"`
	SubnetID  string `protobuf:"bytes,3,opt,name=SubnetID,proto3" json:"SubnetID,omitempty"`
}

func (x *IPPool) Reset() {
	*x = IPPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPPool) ProtoMessage() {}

func (x *IPPool) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPPool.ProtoReflect.Descriptor instead.
func (*IPPool) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{19}
}

func (x *IPPool) GetPoolName() string {
	if x != nil {
		return x.PoolName
	}
	return ""
}

func (x *IPPool) GetNetworkID() string {
	if x != nil {
		return x.NetworkID
	}
	return ""
}

func (x *IPPool) GetSubnetID() string {
	if x != nil {
		return x.SubnetID
	}
	return ""
}

type VPCIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId            string `protobuf:"bytes,1,opt,name=PortId,proto3" json:"PortId,omitempty"`
	IPSet             *IPSet `protobuf:"bytes,2,opt,name=IPSet,proto3" json:"IPSet,omitempty"`
	MACAddress        string `protobuf:"bytes,3,opt,name=MACAddress,proto3" json:"MACAddress,omitempty"`
	Vid               int32  `protobuf:"varint,4,opt,name=Vid,proto3" json:"Vid,omitempty"`
	TrunkId           string `protobuf:"bytes,5,opt,name=TrunkId,proto3" json:"TrunkId,omitempty"`
	NetworkCardPortId string `protobuf:"bytes,6,opt,name=NetworkCardPortId,proto3" json:"NetworkCardPortId,omitempty"`
	SubnetId          string `protobuf:"bytes,7,opt,name=SubnetId,proto3" json:"SubnetId,omitempty"`
	Pool              string `protobuf:"bytes,8,opt,name=Pool,proto3" json:"Pool,omitempty"`
}

func (x *VPCIP) Reset() {
	*x = VPCIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPCIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPCIP) ProtoMessage() {}

func (x *VPCIP) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPCIP.ProtoReflect.Descriptor instead.
func (*VPCIP) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{20}
}

func (x *VPCIP) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

func (x *VPCIP) GetIPSet() *IPSet {
	if x != nil {
		return x.IPSet
	}
	return nil
}

func (x *VPCIP) GetMACAddress() string {
	if x != nil {
		return x.MACAddress
	}
	return ""
}

func (x *VPCIP) GetVid() int32 {
	if x != nil {
		return x.Vid
	}
	return 0
}

func (x *VPCIP) GetTrunkId() string {
	if x != nil {
		return x.TrunkId
	}
	return ""
}

func (x *VPCIP) GetNetworkCardPortId() string {
	if x != nil {
		return x.NetworkCardPortId
	}
	return ""
}

func (x *VPCIP) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *VPCIP) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

type PodRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	IPSet             *IPSet `protobuf:"bytes,2,opt,name=IPSet,proto3" json:"IPSet,omitempty"`
	MACAddress        string `protobuf:"bytes,3,opt,name=MACAddress,proto3" json:"MACAddress,omitempty"`
	Vid               int32  `protobuf:"varint,4,opt,name=Vid,proto3" json:"Vid,omitempty"`
	Pool              string `protobuf:"bytes,5,opt,name=Pool,proto3" json:"Pool,omitempty"`
	TrunkId           string `protobuf:"bytes,6,opt,name=TrunkId,proto3" json:"TrunkId,omitempty"`
	PortId            string `protobuf:"bytes,7,opt,name=PortId,proto3" json:"PortId,omitempty"`
	SubnetId          string `protobuf:"bytes,8,opt,name=SubnetId,proto3" json:"SubnetId,omitempty"`
	Namespace         string `protobuf:"bytes,9,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	NetworkCardPortId string `protobuf:"bytes,10,opt,name=NetworkCardPortId,proto3" json:"NetworkCardPortId,omitempty"`
	Trunk             bool   `protobuf:"varint,11,opt,name=Trunk,proto3" json:"Trunk,omitempty"`
}

func (x *PodRecord) Reset() {
	*x = PodRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodRecord) ProtoMessage() {}

func (x *PodRecord) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodRecord.ProtoReflect.Descriptor instead.
func (*PodRecord) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{21}
}

func (x *PodRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PodRecord) GetIPSet() *IPSet {
	if x != nil {
		return x.IPSet
	}
	return nil
}

func (x *PodRecord) GetMACAddress() string {
	if x != nil {
		return x.MACAddress
	}
	return ""
}

func (x *PodRecord) GetVid() int32 {
	if x != nil {
		return x.Vid
	}
	return 0
}

func (x *PodRecord) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *PodRecord) GetTrunkId() string {
	if x != nil {
		return x.TrunkId
	}
	return ""
}

func (x *PodRecord) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

func (x *PodRecord) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *PodRecord) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PodRecord) GetNetworkCardPortId() string {
	if x != nil {
		return x.NetworkCardPortId
	}
	return ""
}

func (x *PodRecord) GetTrunk() bool {
	if x != nil {
		return x.Trunk
	}
	return false
}

type CliNetworkCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkCardPortId string   `protobuf:"bytes,1,opt,name=NetworkCardPortId,proto3" json:"NetworkCardPortId,omitempty"`
	IPSet             *IPSet   `protobuf:"bytes,2,opt,name=IPSet,proto3" json:"IPSet,omitempty"`
	MACAddress        string   `protobuf:"bytes,3,opt,name=MACAddress,proto3" json:"MACAddress,omitempty"`
	SubnetId          string   `protobuf:"bytes,4,opt,name=SubnetId,proto3" json:"SubnetId,omitempty"`
	NetworkId         string   `protobuf:"bytes,5,opt,name=NetworkId,proto3" json:"NetworkId,omitempty"`
	IPLimit           int32    `protobuf:"varint,6,opt,name=IPLimit,proto3" json:"IPLimit,omitempty"`
	TrunkId           string   `protobuf:"bytes,7,opt,name=TrunkId,proto3" json:"TrunkId,omitempty"`
	SecurityGroups    []string `protobuf:"bytes,8,rep,name=SecurityGroups,proto3" json:"SecurityGroups,omitempty"`
}

func (x *CliNetworkCard) Reset() {
	*x = CliNetworkCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_raptor_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CliNetworkCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliNetworkCard) ProtoMessage() {}

func (x *CliNetworkCard) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_raptor_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliNetworkCard.ProtoReflect.Descriptor instead.
func (*CliNetworkCard) Descriptor() ([]byte, []int) {
	return file_rpc_raptor_proto_rawDescGZIP(), []int{22}
}

func (x *CliNetworkCard) GetNetworkCardPortId() string {
	if x != nil {
		return x.NetworkCardPortId
	}
	return ""
}

func (x *CliNetworkCard) GetIPSet() *IPSet {
	if x != nil {
		return x.IPSet
	}
	return nil
}

func (x *CliNetworkCard) GetMACAddress() string {
	if x != nil {
		return x.MACAddress
	}
	return ""
}

func (x *CliNetworkCard) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *CliNetworkCard) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *CliNetworkCard) GetIPLimit() int32 {
	if x != nil {
		return x.IPLimit
	}
	return 0
}

func (x *CliNetworkCard) GetTrunkId() string {
	if x != nil {
		return x.TrunkId
	}
	return ""
}

func (x *CliNetworkCard) GetSecurityGroups() []string {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

var File_rpc_raptor_proto protoreflect.FileDescriptor

var file_rpc_raptor_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x72, 0x70, 0x63, 0x22, 0x1c, 0x0a, 0x1a, 0x41, 0x63, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x18, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x70, 0x69, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x41, 0x70, 0x69, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x22, 0xad, 0x01, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x50,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x05, 0x56, 0x50, 0x43, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x50, 0x43, 0x49, 0x50, 0x52, 0x05, 0x56, 0x50, 0x43, 0x49,
	0x50, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x46, 0x72, 0x6f, 0x6d,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x54,
	0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x54, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x19, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x50, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x34, 0x0a, 0x1a,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x50, 0x22, 0x45, 0x0a, 0x18, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x29,
	0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x87, 0x02, 0x0a, 0x19, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x50, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x54,
	0x72, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x15, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x17, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49,
	0x50, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x20,
	0x0a, 0x05, 0x56, 0x50, 0x43, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x56, 0x50, 0x43, 0x49, 0x50, 0x52, 0x05, 0x56, 0x50, 0x43, 0x49, 0x50,
	0x22, 0xfe, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x50, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x54,
	0x72, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x49, 0x50, 0x53, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x50, 0x53,
	0x65, 0x74, 0x52, 0x05, 0x49, 0x50, 0x53, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x64, 0x49,
	0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x6e, 0x0a, 0x1a, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x22, 0x4e, 0x0a, 0x18, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x32, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x22, 0x49, 0x0a, 0x19, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x96, 0x04, 0x0a,
	0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x05,
	0x49, 0x50, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x74, 0x52, 0x05, 0x49, 0x50, 0x53, 0x65, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x4d, 0x41, 0x43, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x41, 0x43,
	0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x03, 0x56, 0x50, 0x43, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x50, 0x43, 0x52,
	0x03, 0x56, 0x50, 0x43, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x06, 0x56, 0x50, 0x43, 0x49, 0x50, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64,
	0x2e, 0x56, 0x50, 0x43, 0x49, 0x50, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x56, 0x50,
	0x43, 0x49, 0x50, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49,
	0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x12, 0x18,
	0x0a, 0x07, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e,
	0x0a, 0x04, 0x43, 0x49, 0x44, 0x52, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x74, 0x52, 0x04, 0x43, 0x49, 0x44, 0x52, 0x1a, 0x45,
	0x0a, 0x0b, 0x56, 0x50, 0x43, 0x49, 0x50, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x50, 0x43, 0x49, 0x50, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc2, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x51, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x15, 0x0a, 0x03, 0x56, 0x50,
	0x43, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x22, 0x98, 0x02, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x04, 0x43, 0x49,
	0x44, 0x52, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49,
	0x50, 0x53, 0x65, 0x74, 0x52, 0x04, 0x43, 0x49, 0x44, 0x52, 0x12, 0x28, 0x0a, 0x09, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x74, 0x52, 0x09, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x49, 0x50, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0x2f, 0x0a, 0x05,
	0x49, 0x50, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x34, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x50, 0x76, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x50, 0x76,
	0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x50, 0x76, 0x36, 0x22, 0x5e, 0x0a,
	0x06, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x22, 0xeb, 0x01,
	0x0a, 0x05, 0x56, 0x50, 0x43, 0x49, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x05, 0x49, 0x50, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x74, 0x52, 0x05, 0x49, 0x50, 0x53, 0x65,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x41, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x41, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x56, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0xb7, 0x02, 0x0a, 0x09,
	0x50, 0x6f, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x05, 0x49, 0x50, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x74, 0x52, 0x05, 0x49, 0x50, 0x53, 0x65, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x4d, 0x41, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x41, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x56, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64,
	0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x54, 0x72, 0x75, 0x6e, 0x6b, 0x22, 0x96, 0x02, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64,
	0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x49, 0x50, 0x53, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x50, 0x53, 0x65,
	0x74, 0x52, 0x05, 0x49, 0x50, 0x53, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x41, 0x43, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x41,
	0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54,
	0x72, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x32, 0xef,
	0x04, 0x0a, 0x12, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x57, 0x0a, 0x13, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x54,
	0x0a, 0x12, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x50, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x49, 0x50, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x49, 0x50, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x50, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x50, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x64, 0x49, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x12, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x1e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x54, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x50, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x50, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x50, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x13, 0x41, 0x63, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x3b, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_rpc_raptor_proto_rawDescOnce sync.Once
	file_rpc_raptor_proto_rawDescData = file_rpc_raptor_proto_rawDesc
)

func file_rpc_raptor_proto_rawDescGZIP() []byte {
	file_rpc_raptor_proto_rawDescOnce.Do(func() {
		file_rpc_raptor_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_raptor_proto_rawDescData)
	})
	return file_rpc_raptor_proto_rawDescData
}

var file_rpc_raptor_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_rpc_raptor_proto_goTypes = []any{
	(*AcquireServerStressRequest)(nil), // 0: rpc.AcquireServerStressRequest
	(*AcquireServerStressReply)(nil),   // 1: rpc.AcquireServerStressReply
	(*TransferIPResourceRequest)(nil),  // 2: rpc.TransferIPResourceRequest
	(*TransferIPResourceReply)(nil),    // 3: rpc.TransferIPResourceReply
	(*AcquireInstanceInfoRequest)(nil), // 4: rpc.AcquireInstanceInfoRequest
	(*AcquireInstanceInfoReply)(nil),   // 5: rpc.AcquireInstanceInfoReply
	(*AllocateIPResourceRequest)(nil),  // 6: rpc.AllocateIPResourceRequest
	(*AllocateIPResourceReply)(nil),    // 7: rpc.AllocateIPResourceReply
	(*ReleaseIPResourceRequest)(nil),   // 8: rpc.ReleaseIPResourceRequest
	(*ReleasePodIPReply)(nil),          // 9: rpc.ReleasePodIPReply
	(*AllocateNetworkCardRequest)(nil), // 10: rpc.AllocateNetworkCardRequest
	(*AllocateNetworkCardReply)(nil),   // 11: rpc.AllocateNetworkCardReply
	(*ReleaseNetworkCardRequest)(nil),  // 12: rpc.ReleaseNetworkCardRequest
	(*ReleaseNetworkCardReply)(nil),    // 13: rpc.ReleaseNetworkCardReply
	(*NetworkCard)(nil),                // 14: rpc.NetworkCard
	(*Instance)(nil),                   // 15: rpc.Instance
	(*VPC)(nil),                        // 16: rpc.VPC
	(*Subnet)(nil),                     // 17: rpc.Subnet
	(*IPSet)(nil),                      // 18: rpc.IPSet
	(*IPPool)(nil),                     // 19: rpc.IPPool
	(*VPCIP)(nil),                      // 20: rpc.VPCIP
	(*PodRecord)(nil),                  // 21: rpc.PodRecord
	(*CliNetworkCard)(nil),             // 22: rpc.CliNetworkCard
	nil,                                // 23: rpc.NetworkCard.VPCIPsEntry
	nil,                                // 24: rpc.Instance.NetworkCardsEntry
}
var file_rpc_raptor_proto_depIdxs = []int32{
	20, // 0: rpc.TransferIPResourceRequest.VPCIP:type_name -> rpc.VPCIP
	15, // 1: rpc.AcquireInstanceInfoReply.Instance:type_name -> rpc.Instance
	20, // 2: rpc.AllocateIPResourceReply.VPCIP:type_name -> rpc.VPCIP
	18, // 3: rpc.ReleaseIPResourceRequest.IPSet:type_name -> rpc.IPSet
	14, // 4: rpc.AllocateNetworkCardReply.NetworkCard:type_name -> rpc.NetworkCard
	18, // 5: rpc.NetworkCard.IPSet:type_name -> rpc.IPSet
	16, // 6: rpc.NetworkCard.VPC:type_name -> rpc.VPC
	23, // 7: rpc.NetworkCard.VPCIPs:type_name -> rpc.NetworkCard.VPCIPsEntry
	18, // 8: rpc.NetworkCard.CIDR:type_name -> rpc.IPSet
	24, // 9: rpc.Instance.NetworkCards:type_name -> rpc.Instance.NetworkCardsEntry
	18, // 10: rpc.Subnet.CIDR:type_name -> rpc.IPSet
	18, // 11: rpc.Subnet.GatewayIP:type_name -> rpc.IPSet
	18, // 12: rpc.VPCIP.IPSet:type_name -> rpc.IPSet
	18, // 13: rpc.PodRecord.IPSet:type_name -> rpc.IPSet
	18, // 14: rpc.CliNetworkCard.IPSet:type_name -> rpc.IPSet
	20, // 15: rpc.NetworkCard.VPCIPsEntry.value:type_name -> rpc.VPCIP
	14, // 16: rpc.Instance.NetworkCardsEntry.value:type_name -> rpc.NetworkCard
	4,  // 17: rpc.CoordinatorBackend.AcquireInstanceInfo:input_type -> rpc.AcquireInstanceInfoRequest
	6,  // 18: rpc.CoordinatorBackend.AllocateIPResource:input_type -> rpc.AllocateIPResourceRequest
	8,  // 19: rpc.CoordinatorBackend.ReleaseIPResource:input_type -> rpc.ReleaseIPResourceRequest
	10, // 20: rpc.CoordinatorBackend.AllocateNetworkCard:input_type -> rpc.AllocateNetworkCardRequest
	12, // 21: rpc.CoordinatorBackend.ReleaseNetworkCard:input_type -> rpc.ReleaseNetworkCardRequest
	2,  // 22: rpc.CoordinatorBackend.TransferIPResource:input_type -> rpc.TransferIPResourceRequest
	0,  // 23: rpc.CoordinatorBackend.AcquireServerStress:input_type -> rpc.AcquireServerStressRequest
	5,  // 24: rpc.CoordinatorBackend.AcquireInstanceInfo:output_type -> rpc.AcquireInstanceInfoReply
	7,  // 25: rpc.CoordinatorBackend.AllocateIPResource:output_type -> rpc.AllocateIPResourceReply
	9,  // 26: rpc.CoordinatorBackend.ReleaseIPResource:output_type -> rpc.ReleasePodIPReply
	11, // 27: rpc.CoordinatorBackend.AllocateNetworkCard:output_type -> rpc.AllocateNetworkCardReply
	13, // 28: rpc.CoordinatorBackend.ReleaseNetworkCard:output_type -> rpc.ReleaseNetworkCardReply
	3,  // 29: rpc.CoordinatorBackend.TransferIPResource:output_type -> rpc.TransferIPResourceReply
	1,  // 30: rpc.CoordinatorBackend.AcquireServerStress:output_type -> rpc.AcquireServerStressReply
	24, // [24:31] is the sub-list for method output_type
	17, // [17:24] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_rpc_raptor_proto_init() }
func file_rpc_raptor_proto_init() {
	if File_rpc_raptor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_raptor_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AcquireServerStressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AcquireServerStressReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TransferIPResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TransferIPResourceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AcquireInstanceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*AcquireInstanceInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*AllocateIPResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*AllocateIPResourceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ReleaseIPResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ReleasePodIPReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*AllocateNetworkCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*AllocateNetworkCardReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ReleaseNetworkCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ReleaseNetworkCardReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*VPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*IPSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*IPPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*VPCIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*PodRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_raptor_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CliNetworkCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_raptor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_raptor_proto_goTypes,
		DependencyIndexes: file_rpc_raptor_proto_depIdxs,
		MessageInfos:      file_rpc_raptor_proto_msgTypes,
	}.Build()
	File_rpc_raptor_proto = out.File
	file_rpc_raptor_proto_rawDesc = nil
	file_rpc_raptor_proto_goTypes = nil
	file_rpc_raptor_proto_depIdxs = nil
}
