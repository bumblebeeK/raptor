// Copyright EasyStack. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1beta1 "github.com/easystack/raptor/pkg/k8s/apis/raptor.io/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeRaptorPodNetworks implements RaptorPodNetworkInterface
type FakeRaptorPodNetworks struct {
	Fake *FakeRaptorV1beta1
}

var raptorpodnetworksResource = v1beta1.SchemeGroupVersion.WithResource("raptorpodnetworks")

var raptorpodnetworksKind = v1beta1.SchemeGroupVersion.WithKind("RaptorPodNetwork")

// Get takes name of the raptorPodNetwork, and returns the corresponding raptorPodNetwork object, and an error if there is any.
func (c *FakeRaptorPodNetworks) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.RaptorPodNetwork, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(raptorpodnetworksResource, name), &v1beta1.RaptorPodNetwork{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.RaptorPodNetwork), err
}

// List takes label and field selectors, and returns the list of RaptorPodNetworks that match those selectors.
func (c *FakeRaptorPodNetworks) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.RaptorPodNetworkList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(raptorpodnetworksResource, raptorpodnetworksKind, opts), &v1beta1.RaptorPodNetworkList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.RaptorPodNetworkList{ListMeta: obj.(*v1beta1.RaptorPodNetworkList).ListMeta}
	for _, item := range obj.(*v1beta1.RaptorPodNetworkList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested raptorPodNetworks.
func (c *FakeRaptorPodNetworks) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(raptorpodnetworksResource, opts))
}

// Create takes the representation of a raptorPodNetwork and creates it.  Returns the server's representation of the raptorPodNetwork, and an error, if there is any.
func (c *FakeRaptorPodNetworks) Create(ctx context.Context, raptorPodNetwork *v1beta1.RaptorPodNetwork, opts v1.CreateOptions) (result *v1beta1.RaptorPodNetwork, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(raptorpodnetworksResource, raptorPodNetwork), &v1beta1.RaptorPodNetwork{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.RaptorPodNetwork), err
}

// Update takes the representation of a raptorPodNetwork and updates it. Returns the server's representation of the raptorPodNetwork, and an error, if there is any.
func (c *FakeRaptorPodNetworks) Update(ctx context.Context, raptorPodNetwork *v1beta1.RaptorPodNetwork, opts v1.UpdateOptions) (result *v1beta1.RaptorPodNetwork, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(raptorpodnetworksResource, raptorPodNetwork), &v1beta1.RaptorPodNetwork{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.RaptorPodNetwork), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeRaptorPodNetworks) UpdateStatus(ctx context.Context, raptorPodNetwork *v1beta1.RaptorPodNetwork, opts v1.UpdateOptions) (*v1beta1.RaptorPodNetwork, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(raptorpodnetworksResource, "status", raptorPodNetwork), &v1beta1.RaptorPodNetwork{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.RaptorPodNetwork), err
}

// Delete takes name of the raptorPodNetwork and deletes it. Returns an error if one occurs.
func (c *FakeRaptorPodNetworks) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(raptorpodnetworksResource, name, opts), &v1beta1.RaptorPodNetwork{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeRaptorPodNetworks) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(raptorpodnetworksResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta1.RaptorPodNetworkList{})
	return err
}

// Patch applies the patch and returns the patched raptorPodNetwork.
func (c *FakeRaptorPodNetworks) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.RaptorPodNetwork, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(raptorpodnetworksResource, name, pt, data, subresources...), &v1beta1.RaptorPodNetwork{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.RaptorPodNetwork), err
}
