// Copyright EasyStack. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
// Code generated by informer-gen. DO NOT EDIT.

package v1beta1

import (
	"context"
	time "time"

	raptoriov1beta1 "github.com/easystack/raptor/pkg/k8s/apis/raptor.io/v1beta1"
	versioned "github.com/easystack/raptor/pkg/k8s/generated/clientset/versioned"
	internalinterfaces "github.com/easystack/raptor/pkg/k8s/generated/informers/externalversions/internalinterfaces"
	v1beta1 "github.com/easystack/raptor/pkg/k8s/generated/listers/raptor.io/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// RaptorStaticIPInformer provides access to a shared informer and lister for
// RaptorStaticIPs.
type RaptorStaticIPInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1beta1.RaptorStaticIPLister
}

type raptorStaticIPInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewRaptorStaticIPInformer constructs a new informer for RaptorStaticIP type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewRaptorStaticIPInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredRaptorStaticIPInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredRaptorStaticIPInformer constructs a new informer for RaptorStaticIP type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredRaptorStaticIPInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.RaptorV1beta1().RaptorStaticIPs(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.RaptorV1beta1().RaptorStaticIPs(namespace).Watch(context.TODO(), options)
			},
		},
		&raptoriov1beta1.RaptorStaticIP{},
		resyncPeriod,
		indexers,
	)
}

func (f *raptorStaticIPInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredRaptorStaticIPInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *raptorStaticIPInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&raptoriov1beta1.RaptorStaticIP{}, f.defaultInformer)
}

func (f *raptorStaticIPInformer) Lister() v1beta1.RaptorStaticIPLister {
	return v1beta1.NewRaptorStaticIPLister(f.Informer().GetIndexer())
}
