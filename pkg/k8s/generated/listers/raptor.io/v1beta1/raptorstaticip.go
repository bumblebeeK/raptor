// Copyright EasyStack. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/easystack/raptor/pkg/k8s/apis/raptor.io/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RaptorStaticIPLister helps list RaptorStaticIPs.
// All objects returned here must be treated as read-only.
type RaptorStaticIPLister interface {
	// List lists all RaptorStaticIPs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.RaptorStaticIP, err error)
	// RaptorStaticIPs returns an object that can list and get RaptorStaticIPs.
	RaptorStaticIPs(namespace string) RaptorStaticIPNamespaceLister
	RaptorStaticIPListerExpansion
}

// raptorStaticIPLister implements the RaptorStaticIPLister interface.
type raptorStaticIPLister struct {
	indexer cache.Indexer
}

// NewRaptorStaticIPLister returns a new RaptorStaticIPLister.
func NewRaptorStaticIPLister(indexer cache.Indexer) RaptorStaticIPLister {
	return &raptorStaticIPLister{indexer: indexer}
}

// List lists all RaptorStaticIPs in the indexer.
func (s *raptorStaticIPLister) List(selector labels.Selector) (ret []*v1beta1.RaptorStaticIP, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.RaptorStaticIP))
	})
	return ret, err
}

// RaptorStaticIPs returns an object that can list and get RaptorStaticIPs.
func (s *raptorStaticIPLister) RaptorStaticIPs(namespace string) RaptorStaticIPNamespaceLister {
	return raptorStaticIPNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RaptorStaticIPNamespaceLister helps list and get RaptorStaticIPs.
// All objects returned here must be treated as read-only.
type RaptorStaticIPNamespaceLister interface {
	// List lists all RaptorStaticIPs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.RaptorStaticIP, err error)
	// Get retrieves the RaptorStaticIP from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.RaptorStaticIP, error)
	RaptorStaticIPNamespaceListerExpansion
}

// raptorStaticIPNamespaceLister implements the RaptorStaticIPNamespaceLister
// interface.
type raptorStaticIPNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RaptorStaticIPs in the indexer for a given namespace.
func (s raptorStaticIPNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.RaptorStaticIP, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.RaptorStaticIP))
	})
	return ret, err
}

// Get retrieves the RaptorStaticIP from the indexer for a given namespace and name.
func (s raptorStaticIPNamespaceLister) Get(name string) (*v1beta1.RaptorStaticIP, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("raptorstaticip"), name)
	}
	return obj.(*v1beta1.RaptorStaticIP), nil
}
